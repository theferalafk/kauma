#!/usr/bin/python3
from bytenigma.bytenigma import encrypt as bytenigma_encrypt
from sys import stderr, argv
from traceback import format_exc
from base64 import b64encode, b64decode
from json import loads
from padding_oracle.exploit_oracle import oracle_solver
from aes_gcm.gcm_util import GF, GFElement
from aes_gcm.aes_128_gcm import AES_128_GCM
from aes_gcm.ghashcrack import GHashCrack, CrackMsg
#------------------------------------------BYTENIGMA-------------------------------------------------------------


def _parse_input_bytenigma(enigma_dict):
    try:
        input_string = b64decode(enigma_dict['input'])
        return input_string, enigma_dict['rotors']
    except:
        print('error parsing bytenigma json', file=stderr)
        print(format_exc(), file=stderr)
        exit(1)

def _assemble_output_bytenigma(byte_string):
    output_string = b64encode(byte_string).decode()
    return '{\n\t"output": "'+output_string+'"\n}'

def _bytenigma(action_dict):
    #takes json as an input and outputs a json of the from { "output": output }
    try:
        input_string, rotors = _parse_input_bytenigma(action_dict)
        cipher = bytenigma_encrypt(input_string, rotors)
        return _assemble_output_bytenigma(cipher)
    except:
        print('error with bytenigma encryption', file=stderr)
        print(format_exc(), file=stderr)
        exit(1)

#------------------------------------------PADDING ORACLE------------------------------------------------------------- 
def _parse_input_padding_oracle(padding_oracle_dict):
    try:
        iv = b64decode(padding_oracle_dict["iv"])
        ct = b64decode(padding_oracle_dict["ciphertext"])
        return padding_oracle_dict["hostname"], padding_oracle_dict["port"], iv, ct
    except:
        print('error parsing padding oracle json', file=stderr)
        print(format_exc(), file=stderr)
        exit(1)

def _assemble_output_padding_oracle(byte_string):
    output_string = b64encode(byte_string).decode()
    return '{\n\t"plaintext": "'+output_string+'"\n}'


def _padding_oracle_attack(action_dict):
    #takes json as an input and outputs a json of the from { "output": output }
    try:
        host, port, iv, ct = _parse_input_padding_oracle(action_dict)
        pt = oracle_solver(host, port, iv, ct)
        return _assemble_output_padding_oracle(pt)
    except:
        print('error with padding oracle attack', file=stderr)
        print(format_exc(), file=stderr)
        exit(1)

#------------------------------------------AES GCM------------------------------------------------------------- 

def _parse_input_gcm(gcm_dict):
    try:    
        if gcm_dict["action"]=="gcm-block2poly":
            return b64decode(gcm_dict["block"])
        if gcm_dict["action"]=="gcm-poly2block":
            return gcm_dict["exponents"]
        if gcm_dict["action"]=="gcm-clmul":
            return b64decode(gcm_dict["a"]), b64decode(gcm_dict["b"])
        if gcm_dict["action"]=="gcm-encrypt":
            return b64decode(gcm_dict["key"]), b64decode(gcm_dict["nonce"]), b64decode(gcm_dict["associated_data"]), b64decode(gcm_dict["plaintext"])
        if gcm_dict["action"]=="gcm-recover":
            msg1 = CrackMsg(b64decode(gcm_dict["msg1"]["ciphertext"]), b64decode(gcm_dict["msg1"]["associated_data"]), b64decode(gcm_dict["msg1"]["auth_tag"]))
            msg2 = CrackMsg(b64decode(gcm_dict["msg2"]["ciphertext"]), b64decode(gcm_dict["msg2"]["associated_data"]), b64decode(gcm_dict["msg2"]["auth_tag"]))
            msg3 = CrackMsg(b64decode(gcm_dict["msg3"]["ciphertext"]), b64decode(gcm_dict["msg3"]["associated_data"]), b64decode(gcm_dict["msg3"]["auth_tag"]))
            return msg1, msg2, msg3, b64decode(gcm_dict["msg4"]["ciphertext"]), b64decode(gcm_dict["msg4"]["associated_data"])
    except:
        print('error parsing gcm json', file=stderr)
        print(format_exc(), file=stderr)
        exit(1)


def _gcm_block2poly(action_dict):
    block = _parse_input_gcm(action_dict)
    exponents = str(GF.block_to_poly(block))
    return '{\n\t"exponents": '+exponents+'\n}'

def _gcm_poly2block(action_dict):
    exponents = _parse_input_gcm(action_dict)
    block = b64encode(GF.poly_to_block(exponents)).decode()
    return '{\n\t"block": "'+block+'"\n}'

def _gcm_clmul(action_dict):
    a, b = _parse_input_gcm(action_dict)
    a = GFElement(GF.block_to_poly(a))
    b = GFElement(GF.block_to_poly(b))
    a_times_b = b64encode(GF.poly_to_block(a*b))
    return '{\n\t"a_times_b": "'+a_times_b.decode()+'"\n}'

def _gcm_encrypt(action_dict):
    key, nonce, ad, pt = _parse_input_gcm(action_dict)
    cipher = AES_128_GCM(key, nonce)
    ciphertext, auth_tag = cipher.encrypt_and_tag(pt, ad)
    y0 = b64encode(cipher.y0)
    h = b64encode(cipher.auth_key)
    return '{\n\t"ciphertext": "'+b64encode(ciphertext).decode()+'",\n\t"auth_tag": "'+b64encode(auth_tag).decode()+'",\n\t"Y0": "'+y0.decode()+'",\n\t"H": "'+h.decode()+'"\n}'

def _gcm_recover(action_dict):
    msg1, msg2, msg3, ct, ad = _parse_input_gcm(action_dict)
    cracker = GHashCrack(msg1, msg2, msg3)
    cracker.crack()
    res = cracker.forge_auth_tag(ad, ct)
    if not res:
        res = b'False'
    return '{\n\t"msg4_tag": "'+b64encode(res).decode()+'"\n}'

#------------------------------------------ACTION PARSER-------------------------------------------------------------

def parse_json(input_file):
    try:
        file_content = ''
        with open(input_file, 'r') as f:
            file_content = loads(f.read())
        if file_content['action']=='bytenigma':
            return _bytenigma(file_content)
        if file_content['action']=='padding-oracle-attack':
            return _padding_oracle_attack(file_content)
        if file_content['action']=='gcm-block2poly':
            return _gcm_block2poly(file_content)
        if file_content['action']=='gcm-poly2block':
            return _gcm_poly2block(file_content)
        if file_content['action']=='gcm-clmul':
            return _gcm_clmul(file_content)
        if file_content['action']=='gcm-encrypt':
            return _gcm_encrypt(file_content)
        if file_content['action']=='gcm-recover':
            return _gcm_recover(file_content)
    except:
        print('could not parse action', file=stderr)
        print(format_exc(), file=stderr)
        exit(1)

if __name__ == "__main__":
    print(parse_json(argv[1]))