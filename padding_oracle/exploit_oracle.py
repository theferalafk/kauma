from client import send_oracle_protocol
from crypto_until import encrypt, pad, BLOCK_SIZE

def assemble_byte_string(byte_string_start, byte_string_end):
    res = []
    for i in range(256):
        res.append(byte_string_start+i.to_bytes(1, byteorder='little')+byte_string_end)
    return res

if __name__ == "__main__":
    print(pad(b'djbernstein'))
    ct = encrypt(b'\x12\x34'*8, pad(b'djbernstein'))
    pt = [0]*16
    iv = b'\x00'*15
    for i in range(BLOCK_SIZE):
        current_padding = [(block^(i+1)).to_bytes(1, byteorder='little') for block in pt[BLOCK_SIZE-i:]]
        iv_list = assemble_byte_string(iv[:BLOCK_SIZE-i],b''.join(current_padding))
        response = send_oracle_protocol("127.0.0.1", 3874, 256, ct, iv_list)
        for j in range(len(response)):
            if response[j]==1:
                print("Candidate: " + str(j))
                candidate = j
        pt[BLOCK_SIZE-i-1] = candidate^i
    print(pt)