from client import send_oracle_protocol
from crypto_util import encrypt, pad, BLOCK_SIZE, byte_xor
import time
def assemble_byte_string(byte_string_start, byte_string_end):
    res = []
    for i in range(256):
        tmp = byte_string_start+i.to_bytes(1, byteorder='little')+byte_string_end
        res.append(tmp[len(byte_string_end)+1:])
    return res

if __name__ == "__main__":
    iv = b'a1b2c3d4e5f6g7h8'
    padded_pt = pad(b'djbernstein')
    ct = encrypt(iv, padded_pt)
    guessed_vector = b''
    test_vector = b'\x00'*BLOCK_SIZE
    for i in range(BLOCK_SIZE):
        guess_list = assemble_byte_string(test_vector, b''.join([(x^(i+1)).to_bytes(1, byteorder='little') for x in guessed_vector]))
        response = send_oracle_protocol("127.0.0.1", 3874, ct, guess_list)
        for j in range(len(response)):
            #need to implement edge case if ends with \x02\x02 
            if response[j]==1:
                guessed_vector = (j^(i+1)).to_bytes(1, byteorder='little') + guessed_vector
            if response[j]==1 and i==0:
                #checking for edge case if plaintext ends with \x02\x02
                if send_oracle_protocol("127.0.0.1", 3874, ct, [b'\x00'*(BLOCK_SIZE-2)+b'\xff'+j.to_bytes(1, byteorder='little')])[0]==0:
                    guessed_vector = guessed_vector[1:]
    print(guessed_vector)
    print(byte_xor(iv, guessed_vector))